@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@inject LoginService loginService
@rendermode InteractiveServer
@using learncode.Models
@inject StateContainer State

<div class="register-page">
    <!-- Lado esquerdo com a imagem -->
    <div class="register-image">
        <img src="img/login.png" alt="Imagem de login">
    </div>

    <!-- Lado direito com o formulário -->
    <div class="register-form">
        <EditForm Model="@userData" FormName="userLoginForm">
            <h1 class="pangolin-regular">Entrar</h1>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p style="color: red">@errorMessage</p>
            }

            <div>
                <label for="email" class="pangolin-regular">Email</label>
                <InputText id="email" @bind-Value="userData.Email" placeholder="Digite seu email" class="input" />
            </div>

            <div>
                <label for="password" class="pangolin-regular">Senha</label>
                <InputText id="password" @bind-Value="userData.Password" type="password" placeholder="Digite sua senha" class="input" />
            </div>

            <!-- Botões -->
            <div class="button-group">
                <button type="submit" class="btn-register" @onclick="(() => HandleLoginSubmit(userData))">Entrar</button>
                <a class="loginfo" href="/cadastro">QUERO CRIAR UMA CONTA</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private User userData = new User();
    private string errorMessage = "";

    private async Task HandleLoginSubmit(User userData)
    {
        // Log para verificar se os dados estão corretos
        Console.WriteLine($"Email preenchido: {userData.Email}");
        Console.WriteLine($"Senha preenchida: {userData.Password}");

        if (!string.IsNullOrEmpty(userData.Email) && !string.IsNullOrEmpty(userData.Password))
        {
            try
            {
                var user = await loginService.AuthenticateAsync(userData.Email, userData.Password);

                if (user != null)
                {
                     // se for admin, redirecionar para a página de tableusers e senao para a home
                    if (user.Role == "Admin")
                    {
                        Navigation.NavigateTo("/tableusers");
                    }
                    else
                    {
                        // Armazena o usuário logado no StateContainer para edição
                    State.EditUser = user.Clone();
            // Redireciona para a página de edição de perfil
                    Navigation.NavigateTo("/");
                        
                    }
                }
                else
                {
                    // Exibir mensagem de erro de login
                    errorMessage = "Email ou senha inválidos.";
                }
            }
            catch (Exception ex)
            {
                // Exibir erros no console, caso algo dê errado no loginService
                Console.WriteLine($"Erro ao fazer login: {ex.Message}");
                errorMessage = "Erro ao fazer login. Tente novamente.";
            }
        }
        else
        {
            errorMessage = "Por favor, preencha ambos os campos.";
        }
    }

    private void GoToRegister()
    {
        // Redirecionar para a página de cadastro
        Navigation.NavigateTo("/cadastro");
    }
}

